--CRIAR TABELAS--

CREATE TABLE clientes(
cod_cliente int primary key, 
nome_cliente varchar (20) not null,
sobrenome_cliente varchar(20) not null

);


CREATE TABLE produtos(
cod_produto int primary key, 
nome_produto varchar (30) not null, 
descricao text null, --null significa que a descrição pode ser nula, em branco e o null aceita isso
preco numeric check(preco > 0) not null, --numeric aceita numeros com virgula, check evita que o preço seja menor que zero
qtdd_estoque smallint default 0, --smallint significa que não vai ser um número muito grande, default significa que quando eu cadastrar um produto novo e não informar a qtdd vai ser 0 automaticamente;  

);

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



--CHAVES ESTRANGEIRAS--

CREATE TABLE pedidos(
cod_pedidos serial primary key, -- serial o programa vai gerar altomaticamente um numero inteiro sequencial , sem eu precisar digitar
cod_cliente int not null references clientes(cod_cliente),-- CHAVE ESTRANGEIRA o cod cliente da tabela pedidos está fazendo referencia ao cod clientes da tabela clientes. 
qtdd smalint not null, 
cod_produto int not null, -- outra chave estrangeira, agora vamos criar com o foreing key (linha abaixo)
foreign key(cod_produto) references produtos(cod_produtos)-- está passando uma referencia do cod_produtos da tabela pedidos para a tabela produtos na coluna (cod_produtos)

)


------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


--INSERIR REGISTROS NAS TABELAS (INSERT INTO) 

insert into nome_tabela(caluna1, coluna2, coluna3) values (dado1, dado2, dado3);

--cadastrando 3 clientes
insert into clientes(cod_cliente, nome_cliente, sobrenome_cliente) 
values (1, 'Lucas', 'Leopolski');
insert into clientes(cod_cliente, nome_cliente, sobrenome_cliente) 
values (2, 'Pedro', 'Leopolski');
insert into clientes(cod_cliente, nome_cliente, sobrenome_cliente) 
values (3, 'Ana', 'Leopolski');


--para vizualizar se o cadastro deu certo: 

select * from clientes -- vai imprimir na tela uma tabela com os dados que estão na tabela clientes



--cadastrar produtos
--PARA INSERIR VARIOS CADASTROS E NÃO PRECISAR DAR UM INSERT INTO PARA CADA CADASTRO COLOCAMOS VALUES AÍ ENTRE PARENTESES COLOCAMOS OS PRODUTOS QUE DESEJAMOS INSERIR, SEPARADOS POR ','
PARA FINALIZAR A INSERÇÃO COLOCAMOS ';' DEPOIS DO ULTIMO PARENTESES

insert into produtos(cod_produto, nome_produto, descricao, preco, qtdd_estoque)
values
(1, 'Alcool Gel', 'Garrafa de alcool em gel de 1 litro', 12.90, 20),
('Luvas de latex, 'Caixa de luvas de latex com 100 unidades', 32.50, 25),
('Pasta de dentes', 'Tubo de Pasta de dentes de 90g', 3.60, 12),
('Sabonete', 'Sabonete antibacteriano', 3.50, 5),
('Enxaguante bucal', 'Antiseptico bucal de 500ml', 17.00, 28);

select * from produtos 


--cadastrar pedidos

insert into pedidos(cod_clientes, cod_produtos, qtdd) -- como o cod_pedidos é do tipo serial, (o sisytema insere altomaticamente um número pra ele) não coloco no insert into
values
(1, 2, 3),
(2, 3, 2),
(1, 3, 4);

select * from pedidos


------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

--CONSULTAS SIMPLES EM TABELAS DE BD VIA SELECT 

--SINTAZE
--SELECT coluna(s) FROM nome_tabela (o * asterisco significa todas as linhas da tabela)


--SELECT * FROM clientes chamnado todos os dados da tabela 
--SELECT nome_clientes FROM clientes; está selecionando apenas a coluna nome da tabela clientes 
-- SELECT nome_cliente, sobrenome_cliente FROM clientes; está trazendo o nome e sobrenome da tabela clientes

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

--FILTRO DE CONSULTAS COM A CLAUSULA WHERE 
--(FAZ UMA CONSULTA EXPECIFICA, POR EXEMPLO, UM USUARIO EM PARTICULAR, UM ITEM OU ATÉ MESMO UM CONJUNTO DE ITENS )
--SINTAXE SELECT coluna(s) FROM tabela(s) WHERE condição-filtragem; 

SELECT * FROM clientes; -- retorna a tabela toda

SELECT * FROM clientes WHERE cod_cliente = 1; está dizendo que o quer o cliente que tem o codigo 1 - se colocar um código inexistente executa o codigo porém não trás nada


------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

















